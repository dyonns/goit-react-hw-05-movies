{"version":3,"file":"static/js/597.eb85e5f6.chunk.js","mappings":"4OACA,EAA6B,+BAA7B,EAAgF,sCAAhF,EAA0M,4CAA1M,EAAyQ,qC,SC8BzQ,EA1BmB,WACjB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,KACAC,QAAQC,IAAIH,GAKZ,OACE,kBAAMI,UAAWC,EAAcC,SALZ,SAAAC,GACnBA,EAAEC,iBACFP,EAAU,CAAEQ,MAAOZ,GACpB,EAEC,WACE,mBAAQa,KAAK,SAASN,UAAWC,EAAjC,UACE,iBAAMD,UAAWC,EAAjB,uBAGF,kBACED,UAAWC,EACXK,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,8BACZC,SAAU,SAAAP,GAAC,OAAIT,EAASS,EAAEQ,OAAOC,MAAtB,MAIlB,E,SCAD,EAzBiB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACZC,GAAWC,EAAAA,EAAAA,MACjB,OACE,8BACGF,EAAaG,QAAU,GACtB,8CAEA,wBACGH,EAAaI,KAAI,SAAAC,GAAK,OACrB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMR,GAAhD,SACGI,EAAMK,SAFFL,EAAME,GADM,OAWhC,E,SCaD,EA9Be,WACb,OAAwC5B,EAAAA,EAAAA,UAAS,IAAjD,eAAOqB,EAAP,KAAqBW,EAArB,KACA,GAAiB7B,EAAAA,EAAAA,MAEXU,GAFN,eAEqBoB,IAAI,SAmBzB,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,gHAEGC,EAAAA,EAAAA,IAAoBvB,GAFvB,UAGY,KADtBwB,EAFU,QAGPC,QAAQd,OAHD,sBAIR,IAAIe,MAAM,kBAJF,OAMVC,EAASH,EAAKC,QACjBb,KAAI,SAAAC,GAAK,MAAK,CAAEE,GAAIF,EAAME,GAAIG,MAAOL,EAAMK,MAAlC,IACTU,MAAM,EAAG,IACZT,EAAgBQ,GATA,wDAWV,IAAID,MAAM,kBAXA,0DAAH,qDAcjBJ,GACD,GAAE,CAACtB,KAGF,iCACE,SAAC,EAAD,KACA,SAAC,EAAD,CAAUQ,aAAcA,MAG7B,C","sources":["webpack://react-homework-template/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","components/FilmList/FilmList.jsx","pages/MoviesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"SearchForm_SearchForm__jbIQn\",\"SearchForm_button\":\"SearchForm_SearchForm_button__yxV1e\",\"SearchForm-button\":\"SearchForm_SearchForm-button__IrjWW\",\"SearchForm_button_label\":\"SearchForm_SearchForm_button_label__rnS0R\",\"SearchForm_input\":\"SearchForm_SearchForm_input__S3I-K\"};","import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport s from './SearchForm.module.css';\n\nconst SearchForm = () => {\n  const [input, setInput] = useState('');\n  const [search, setSearch] = useSearchParams();\n  console.log(search);\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearch({ query: input });\n  };\n  return (\n    <form className={s.SearchForm} onSubmit={handleSubmit}>\n      <button type=\"submit\" className={s.SearchForm_button}>\n        <span className={s.SearchForm_button_label}>Search</span>\n      </button>\n\n      <input\n        className={s.SearchForm_input}\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Enter the name of the movie\"\n        onChange={e => setInput(e.target.value)}\n      />\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst FilmList = ({ SearchMovies }) => {\n  const location = useLocation();\n  return (\n    <>\n      {SearchMovies.length <= 0 ? (\n        <p>Enter some movie.</p>\n      ) : (\n        <ul>\n          {SearchMovies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nFilmList.propTypes = {\n  SearchMovies: PropTypes.array.isRequired,\n};\n\nexport default FilmList;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchForm from '../components/SearchForm/SearchForm';\nimport FilmList from '../components/FilmList/FilmList';\nimport { getSearchMoviesList } from '../servises/FilmAPI';\n\nconst Movies = () => {\n  const [SearchMovies, setSearchMovies] = useState([]);\n  const [search] = useSearchParams();\n\n  const query = search.get('query');\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const data = await getSearchMoviesList(query);\n        if (data.results.length === 0) {\n          throw new Error('No Movies data');\n        }\n        const movies = data.results\n          .map(movie => ({ id: movie.id, title: movie.title }))\n          .slice(0, 20);\n        setSearchMovies(movies);\n      } catch (error) {\n        throw new Error('No Movies data');\n      }\n    };\n    fetchMovies();\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm />\n      <FilmList SearchMovies={SearchMovies} />\n    </>\n  );\n};\nexport default Movies;\n\n// sfc\n"],"names":["useState","input","setInput","useSearchParams","search","setSearch","console","log","className","s","onSubmit","e","preventDefault","query","type","autoComplete","autoFocus","placeholder","onChange","target","value","SearchMovies","location","useLocation","length","map","movie","to","id","state","from","title","setSearchMovies","get","useEffect","fetchMovies","getSearchMoviesList","data","results","Error","movies","slice"],"sourceRoot":""}